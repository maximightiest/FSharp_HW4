// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

 (* File Parser.FSy 
    Parser for F# type expression sublanguage

    To be completed
  *)

 open AST;

# 16 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COMMA
  | RPAR
  | LPAR
  | TNAME of (string)
  | TVAR of (string)
  | TIMES
  | ARROW
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COMMA
    | TOKEN_RPAR
    | TOKEN_LPAR
    | TOKEN_TNAME
    | TOKEN_TVAR
    | TOKEN_TIMES
    | TOKEN_ARROW
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_SExpr
    | NONTERM_Expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COMMA  -> 1 
  | RPAR  -> 2 
  | LPAR  -> 3 
  | TNAME _ -> 4 
  | TVAR _ -> 5 
  | TIMES  -> 6 
  | ARROW  -> 7 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COMMA 
  | 2 -> TOKEN_RPAR 
  | 3 -> TOKEN_LPAR 
  | 4 -> TOKEN_TNAME 
  | 5 -> TOKEN_TVAR 
  | 6 -> TOKEN_TIMES 
  | 7 -> TOKEN_ARROW 
  | 10 -> TOKEN_end_of_input
  | 8 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startMain 
    | 1 -> NONTERM_Main 
    | 2 -> NONTERM_SExpr 
    | 3 -> NONTERM_SExpr 
    | 4 -> NONTERM_Expr 
    | 5 -> NONTERM_Expr 
    | 6 -> NONTERM_Expr 
    | 7 -> NONTERM_Expr 
    | 8 -> NONTERM_Expr 
    | 9 -> NONTERM_Expr 
    | 10 -> NONTERM_Expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 10 
let _fsyacc_tagOfErrorTerminal = 8

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COMMA  -> "COMMA" 
  | RPAR  -> "RPAR" 
  | LPAR  -> "LPAR" 
  | TNAME _ -> "TNAME" 
  | TVAR _ -> "TVAR" 
  | TIMES  -> "TIMES" 
  | ARROW  -> "ARROW" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COMMA  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | TNAME _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TVAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | TIMES  -> (null : System.Object) 
  | ARROW  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 2us; 65535us; 5us; 6us; 14us; 15us; 6us; 65535us; 0us; 2us; 5us; 4us; 13us; 9us; 14us; 4us; 18us; 10us; 19us; 11us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 6us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 4us; 1us; 6us; 8us; 9us; 1us; 1us; 5us; 2us; 3us; 6us; 8us; 9us; 1us; 3us; 1us; 3us; 1us; 4us; 1us; 5us; 5us; 6us; 7us; 8us; 9us; 10us; 4us; 6us; 8us; 8us; 9us; 4us; 6us; 8us; 9us; 9us; 1us; 6us; 2us; 7us; 10us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 9us; 11us; 17us; 19us; 21us; 23us; 25us; 31us; 36us; 41us; 43us; 46us; 48us; 50us; 52us; 54us; 56us; 58us; |]
let _fsyacc_action_rows = 21
let _fsyacc_actionTableElements = [|3us; 32768us; 3us; 13us; 4us; 8us; 5us; 7us; 0us; 49152us; 4us; 32768us; 0us; 3us; 4us; 12us; 6us; 19us; 7us; 18us; 0us; 16385us; 4us; 16386us; 1us; 5us; 4us; 12us; 6us; 19us; 7us; 18us; 3us; 32768us; 3us; 13us; 4us; 8us; 5us; 7us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 5us; 32768us; 1us; 14us; 2us; 20us; 4us; 12us; 6us; 19us; 7us; 18us; 2us; 16392us; 4us; 12us; 6us; 19us; 1us; 16393us; 4us; 12us; 0us; 16390us; 3us; 32768us; 3us; 13us; 4us; 8us; 5us; 7us; 3us; 32768us; 3us; 13us; 4us; 8us; 5us; 7us; 1us; 32768us; 2us; 16us; 1us; 32768us; 4us; 17us; 0us; 16391us; 3us; 32768us; 3us; 13us; 4us; 8us; 5us; 7us; 3us; 32768us; 3us; 13us; 4us; 8us; 5us; 7us; 0us; 16394us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 4us; 5us; 10us; 11us; 16us; 20us; 21us; 22us; 23us; 29us; 32us; 34us; 35us; 39us; 43us; 45us; 47us; 48us; 52us; 56us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 1us; 3us; 1us; 1us; 2us; 6us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 16387us; 16388us; 16389us; 65535us; 65535us; 65535us; 16390us; 65535us; 65535us; 65535us; 65535us; 16391us; 65535us; 65535us; 16394us; |]
let _fsyacc_reductions ()  =    [| 
# 126 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startMain));
# 135 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "Parser.fsy"
                                 _1 
                   )
# 33 "Parser.fsy"
                 : AST.typeExpr));
# 146 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                     [ _1 ] 
                   )
# 37 "Parser.fsy"
                 : AST.typeExpr list));
# 157 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr list)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "Parser.fsy"
                                                [ _1 ] @ _3 
                   )
# 38 "Parser.fsy"
                 : AST.typeExpr list));
# 169 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 42 "Parser.fsy"
                                       TVar _1 
                   )
# 42 "Parser.fsy"
                 : AST.typeExpr));
# 180 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "Parser.fsy"
                                        BasicT _1 
                   )
# 43 "Parser.fsy"
                 : AST.typeExpr));
# 191 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                                           ParT( _2, [_1] ) 
                   )
# 44 "Parser.fsy"
                 : AST.typeExpr));
# 203 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            let _4 = (let data = parseState.GetInput(4) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr list)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "Parser.fsy"
                                                            ParT(_6, [ _2 ] @ _4) 
                   )
# 45 "Parser.fsy"
                 : AST.typeExpr));
# 216 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                               ArrowT( _1, _3) 
                   )
# 46 "Parser.fsy"
                 : AST.typeExpr));
# 228 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "Parser.fsy"
                                               ProdT( _1, _3)
                   )
# 47 "Parser.fsy"
                 : AST.typeExpr));
# 240 "Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : AST.typeExpr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                              ( _2 ) 
                   )
# 48 "Parser.fsy"
                 : AST.typeExpr));
|]
# 252 "Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 11;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let Main lexer lexbuf : AST.typeExpr =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
