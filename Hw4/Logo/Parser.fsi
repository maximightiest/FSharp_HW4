// Signature file for parser generated by fsyacc
module Parser
type token = 
  | EOF
  | LBRACK
  | RBRACK
  | SEMICOL
  | FORW
  | REP
  | LEFT
  | RIGHT
  | NUM of (int)
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LBRACK
    | TOKEN_RBRACK
    | TOKEN_SEMICOL
    | TOKEN_FORW
    | TOKEN_REP
    | TOKEN_LEFT
    | TOKEN_RIGHT
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startMain
    | NONTERM_Main
    | NONTERM_Block
    | NONTERM_CommandSeq
    | NONTERM_Command
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val Main : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (AST.command list) 
